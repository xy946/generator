package classfile;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import util.Constants;
import util.GlobalException;
import util.PaginationResponse;
import util.QueryParam;
import java.util.List;
import model.${ClassName};
import classfile.${ClassName}Service;
import classfile.${ClassName}Mapper;

/**
 * 描述:
 *      ${functionName}
 * @author yzc
 * @create ${date}
 */
@Service
public class ${ClassName}ServiceImpl implements ${ClassName}Service {
    
    private static Logger log=LoggerFactory.getLogger(${ClassName}ServiceImpl.class);
    
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    //新增${functionName}
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int insert(${ClassName} ${className}) {
        log.info("新增${functionName}请求成功 ==>>参数为 ==>>> {}",${className});
        int count = ${className}Mapper.insert(${className});
        log.info("新增${functionName}请求成功 ==>>返回结果 ==>>> {}",count);
        return count;
    }

    //修改${functionName}
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int update(${ClassName} ${className}) {
        log.info("修改${functionName}请求成功 ==>>参数为 ==>>> {}",${className});
        int count = ${className}Mapper.update(${className});
        log.info("修改${functionName}请求成功 ==>>返回结果 ==>>> {}",count);
        return count;
    }

    //通过id查看${functionName}
    @Override
    public ${ClassName} findById(Long id) {
        log.info("进入通过id查看${functionName} ==>> 参数id为==>>> {}",id);
        ${ClassName} ${className} = ${className}Mapper.findById(id);
        log.info("通过id查看${functionName}请求成功 ==>> 返回结果为==>>> {}",${className}==null? null:${className}.toString());
        return ${className};
    }

    //通过id删除${functionName}
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int deleteById(Long id) {
        log.info("进入通过id删除${functionName} ==>> 参数id为==>>> {}",id);
        int count = ${className}Mapper.deleteById(id);
        log.info("通过id删除${functionName}请求成功 ==>> 返回结果为==>>> {}",count);
        return count;
    }

    //条件分页查询${functionName}
    @Override
    public PaginationResponse<${ClassName}> findList(QueryParam param) {
        log.info("进入条件分页查询${functionName} ==>> 参数param为==>>> {}",param.toString());
        Page<Object> page = PageHelper.startPage(param.getPageNum(), param.getPageSize(), true);
        List<${ClassName}> ${className}List=${className}Mapper.findList(param);
        PaginationResponse<${ClassName}> response =
                PaginationResponse.getPagination(param, page.getTotal(), ${className}List, page.getPages());
        log.info("条件分页查询${functionName}请求成功 ==>> 返回结果为==>>> {}",response==null? null:response.toString());
        return response;
    }
}
